#include "trading.h"
#include "affichage.h"
#include "analyseforme.h"
#include "choixparam.h"
#include "edittexte.h"
#include "modeauto.h"
#include "modemanuel.h"
#include "modepasapas.h"
#include "strategietrading.h"
#include "import.h"
using namespace std;

// TD

Devise::Devise(const QString& c, const QString& m, const QString& z) :
    monnaie(m), zone(z) {
    if (c.size() != 3) throw TradingException("code devise incorrect");
    for (unsigned int i = 0; i < 3; i++) {
        if (c[i] <= 'A' || c[i] >= 'Z') throw TradingException("code devise incorrect");

    }
    code=c;
}
PaireDevises::PaireDevises(const Devise& b, const Devise& c, const QString& s) :
    base(&b), contrepartie(&c), surnom(s) {}

QString PaireDevises::toString() const{
    QString str;
    str=getBase().getCode()+"/"+getContrepartie().getCode();
    if (getSurnom()!="") str+="("+getSurnom()+")";
    return str;
}

void CoursOHLC::setCours(double o, double h, double l, double c, double vol, QDate d) {
    if (o < 0 || h < 0 || l < 0 || c<0 || vol<0 || l>h) throw TradingException("cours OHLC incorrect");
        open = o;
        high = h;
        low = l;
        close = c;
        volume = vol;
        date = d;
}

CoursOHLC::CoursOHLC(double o, double h, double l, double c, double vol, QDate d){
    if (o < 0 || h < 0 || l < 0 || c<0 || vol<0 || l>h) throw TradingException("cours OHLC incorrect");
        open = o;
        high = h;
        low = l;
        close = c;
        volume = vol;
        date = d;
}


void EvolutionCours::addCours(double o, double h, double l, double c, double vol, QDate d) {
    if (nbMaxCours == nbCours) { // agrandissement du tableau
        CoursOHLC* newtab = new CoursOHLC[nbMaxCours + 100];
        for (unsigned int i = 0; i < nbCours; i++) newtab[i] = cours[i];
        // mise � jour des attributs
        CoursOHLC* old = cours;
        cours = newtab;
        nbMaxCours += 100;
        delete[] old; // destruction de l'ancien tableau
    }
    // ajout du cours
    cours[nbCours].setCours(o, h, l, c, vol, d);
    nbCours++;
}

EvolutionCours::~EvolutionCours() {
    delete[] cours;
}

EvolutionCours::EvolutionCours(const EvolutionCours& e) :
    paire(e.paire),
    cours(new CoursOHLC[e.nbCours]),
    nbCours(e.nbCours),
    nbMaxCours(e.nbCours)
{
    for (unsigned int i = 0; i < nbCours; i++) cours[i] = e.cours[i];
}

/*
EvolutionCours& EvolutionCours::operator=(const EvolutionCours& e) {
    if (this != &e) { // se protéger de l'ato-affectation
        paire = e.paire;
        nbCours = 0;
        for (unsigned int i = 0; i < e.nbCours; i++)
            e.addCours(e.cours[i].getOpen(), e.cours[i].getHigh(),e.cours[i].getLow(), e.cours[i].getClose(),e.cours[i].getVolume(),e.cours[i].getDate());
    }
    return *this;
}
*/

const Devise& DevisesManager::creationDevise(const QString& c, const QString& m, const QString& z) {
    if (nbDevises == nbMaxDevises) { // agrandissement tableau
        Devise** newtab = new Devise*[nbMaxDevises + 10];
        for (unsigned int i = 0; i < nbDevises; i++) newtab[i] = devises[i];
        // mise � jour des attributs
        Devise** old = devises;
        nbMaxDevises += 10;
        devises = newtab;
        delete[] old;
    }
    // c�ration et ajout de la nouvelle devise...
    devises[nbDevises] = new Devise(c, m, z);
    return *devises[nbDevises++];
}

const Devise& DevisesManager::getDevise(const QString& c)const {
    for (unsigned int i = 0; i < nbDevises; i++)
        if (devises[i]->getCode() == c) return *devises[i];
    throw TradingException("devise inexistante");
}

const PaireDevises& DevisesManager::getPaireDevises(const QString & c1, const QString & c2) const {
    const Devise& d1 = getDevise(c1);
    const Devise& d2 = getDevise(c2);
    for (unsigned int i = 0; i < nbPaires; i++)
        if (paires[i]->getBase().getCode() == c1 &&
            paires[i]->getContrepartie().getCode() == c2)
            return *paires[i];
    // si la paire de devises n'est pas trouv�e, il faut la cr�er
    if (nbPaires == nbMaxPaires) { // agrandissement du tableau
        PaireDevises** newtab = new PaireDevises*[nbMaxPaires + 10];
        for (unsigned int i = 0; i < nbPaires; i++) newtab[i] = paires[i];
        PaireDevises** old = paires;
        nbMaxPaires += 10;
        paires = newtab;
        delete[] old;
    }
    paires[nbPaires] = new PaireDevises(d1, d2);
    return *paires[nbPaires++];
}

DevisesManager::~DevisesManager() {
    for (unsigned int i = 0; i < nbPaires; i++) delete paires[i];
    for (unsigned int i = 0; i < nbDevises; i++) delete devises[i];
    delete[] paires; delete[] devises;
}

DevisesManager::Handler DevisesManager::handler=
                                DevisesManager::Handler();

// PROJET

Interface::Interface(){

    // Initialisation des 9 boutons
    importation = new QPushButton("Importer un fichier",this);
    affichage = new QPushButton("Affichage",this);
    choixParam = new QPushButton("Choix des Paramètres",this);
    strategieTrading = new QPushButton("Stratégie de Trading",this);
    modeManuel = new QPushButton("Mode Manuel",this);
    modeAuto = new QPushButton("Mode Automatique",this);
    editTexte = new QPushButton("Editeur de Texte",this);
    indicTechnique = new QPushButton("Indicateur Technique",this);
    analyseForme = new QPushButton("Analyse de Forme",this);
    modePasAPas = new QPushButton("Mode Pas à Pas",this);

    // CREATION DES OBJETS

    // On crée un objet de type CSVViewer, qui sera dans une fenêtre dont l'interface est la fenêtre parente (ex: arbre)

    // Layout en grille
    grille = new QGridLayout;
    // une grille fonctionne comme un tableau en excel dans lequel on place les éléments tq:
    // grid->addWidget(NomBouton,ligne,colonne)

    grille->addWidget(importation,0,0);
    grille->addWidget(affichage,1,0);
    grille->addWidget(choixParam,2,0);
    grille->addWidget(strategieTrading,3,0);
    grille->addWidget(modeManuel,4,0);
    grille->addWidget(modeAuto,5,0);
    grille->addWidget(editTexte,6,0);
    grille->addWidget(indicTechnique,7,0);
    grille->addWidget(analyseForme,8,0);
    grille->addWidget(modePasAPas,9,0);


    // CONNEXION DES BOUTONS (Création des fenêtres filles)


    connect(affichage,SIGNAL(clicked()),this,SLOT(CSVView()));
    connect(choixParam,SIGNAL(clicked()),this,SLOT(Choix()));
    connect(editTexte,SIGNAL(clicked()),this,SLOT(EditT()));
    connect(importation,SIGNAL(clicked()),this,SLOT(import()));
    /*
    connect(strategieTrading,SIGNAL(clicked()),this,SLOT(Strat()));
    connect(choixParam,SIGNAL(clicked()),this,SLOT(Manuel()));
    connect(choixParam,SIGNAL(clicked()),this,SLOT(Auto()));
    connect(indicTechnique,SIGNAL(clicked()),this,SLOT(IndicT()));
    connect(choixParam,SIGNAL(clicked()),this,SLOT(Analyse()));
    connect(choixParam,SIGNAL(clicked()),this,SLOT(PasAPas()));
    */

    this->setLayout(grille);

}

void Interface::CSVView(){
    if(e == nullptr){ // Si l'ouverture de fichier échoue, affiche un message d'erreur
        QMessageBox::critical(this,"Erreur","Aucun fichier .csv importé. \nveuillez en importer un avant de sélectionner cette option");
        // On peut faire \n pour sauter une ligne dans le formattage du texte
    }
    else{
        hide(); // Cache la fenêtre du menu
        QWidget *fen = new QWidget;
        // On fait un dynamique cast pour renvoyer un EvolutionCours*, attendu dans CSVViewer
        CSVViewer *obj_CSVViewer = new CSVViewer(dynamic_cast<EvolutionCours*>(e),this);
        qDebug() << "Création de l'objet CSVViewer efectuée";
        QGridLayout *lay = new QGridLayout;
        lay->addWidget(obj_CSVViewer,0,0);
        fen->setLayout(lay);
        fen->show();
        connect(obj_CSVViewer,SIGNAL(destroyed()),fen,SLOT(deleteLater()));
    }
}

void Interface::Choix(){
    hide(); // Cache la fenêtre du menu
    QWidget *fen = new QWidget;
    QPushButton *bout = new QPushButton("Revenir au Menu",fen);
    QGridLayout *lay = new QGridLayout;
    lay->addWidget(bout,0,0);
    fen->setLayout(lay);
    fen->show();

    // Lorsque le bouton est cliqué, le menu est réaffiché et la fenêtre fille est détruite
    connect(bout,SIGNAL(clicked()),this,SLOT(show()));
    connect(bout,SIGNAL(clicked()),fen,SLOT(deleteLater()));
}

void Interface::EditT(){
    hide(); // Cache la fenêtre du menu
    EditTexte *edit = new EditTexte;
    qDebug() << "Création de l'objet EditTexte efectuée";
    edit->show();
    connect(edit,SIGNAL(destroyed()),this,SLOT(show()));
    // Lorsque la fenetre edit est détruite, on réaffiche l'interface

    // Lorsque le bouton est cliqué, le menu est réaffiché et la fenêtre fille est détruite
}

void Interface::import(){


   QString filtre(".csv(*.csv)");

   // Boîte de dialogue "Ouvrir un fichier" renvoyant en QString le chemin vers le fichier
   QFileInfo chemin = QFileDialog::getOpenFileName(this, "Ouvrir un fichier", "../",filtre);

   QString nomdufichier(chemin.fileName());

   QString chemin2=chemin.absoluteFilePath();

   string chemin3=chemin2.toStdString();
   if(nomdufichier.contains("-")){
       QStringList list = QString(nomdufichier).split("-");
           //QString premieredevise = QUrl(list.at(0));
           //list.removeFirst();
           //QString deuxiemedevise = list.join(QString("-"));
   }

   DevisesManager& m=DevisesManager::getManager();
     m.creationDevise("USD", "Dollar Américain","USA");
     m.creationDevise("BTC", "BitCoin","monnaie virtuelle");
     const PaireDevises& BTC_USD=m.getPaireDevises("BTC", "USD");
     e = new EvolutionCours(BTC_USD);

<<<<<<< HEAD
string chemin2=chemin.toStdString();
DevisesManager& m=DevisesManager::getManager();
  m.creationDevise("USD", "Dollar Américain","USA");
  m.creationDevise("BTC", "BitCoin","monnaie virtuelle");
  const PaireDevises& BTC_USD=m.getPaireDevises("BTC", "USD");
  EvolutionCours e(BTC_USD);
  csv::Lecteur::creertabcours(e,chemin2);
=======
     csv::Lecteur::RemplirEvolutionCours(dynamic_cast<EvolutionCours*>(e),chemin3);


>>>>>>> 87926f763e41c8cf6327605f8e42b03192e4335c

  }

